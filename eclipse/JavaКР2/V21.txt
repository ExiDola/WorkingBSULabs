import javax.swing.*;
import java.awt.*;
import java.awt.Graphics;
import java.util.function.Function;
//примечание копипастера: в оригинале точка двигалась по //вертикали, но я хз. Прост поменяйте ифчо в repaint x и t
/* Вариант 21 Изобразить в окне апплета гармонические колебания точки вдоль некоторого горизонтального отрезка. Если длина отрезка равна q, то расстояние от точки до левого
* конца в момент времени t можно считать равным q(1+cos(wt))/2,где w - некоторая константа.
* Указанные величины вводятся через параметры апплета.
*
*/

public class Task21 extends JFrame {

   final int CX = 600, CY = 500;
   Timer timer;
   final int q = 350, w = 7;
   int x, t;
   Function<Integer,Integer> func = (t) -> (int)(0.5 * q * (1 + Math.cos(1.0 * w * t)));

   public Task21 () {
       setDefaultCloseOperation(EXIT_ON_CLOSE);
       t=0;
       x=func.apply(t);
       setSize(CX, CY);
       timer = new Timer(100, e ->  doMove());
       timer.start();
   }

   @Override
   public void paint(Graphics g) {
       g.clearRect(0,0,getWidth(),getHeight());
       g.setColor(Color.GREEN);
       g.drawLine(0,getHeight()/2,getWidth(),getHeight()/2);
       g.setColor(Color.BLACK);
       g.fillOval(t, x,10,10);
   }

   void doMove () {
       if (t>getHeight())
           t=0;
       t += 10;
       x = func.apply(t);
       repaint();
   }

   public static void main(String[] args) {
       new Task21().setVisible(true);
   }
}
